package com.nyelam.android.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NYCOUNTRY_CODE".
*/
public class NYCountryCodeDao extends AbstractDao<NYCountryCode, String> {

    public static final String TABLENAME = "NYCOUNTRY_CODE";

    /**
     * Properties of entity NYCountryCode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CountryCode = new Property(1, String.class, "countryCode", false, "COUNTRY_CODE");
        public final static Property CountryName = new Property(2, String.class, "countryName", false, "COUNTRY_NAME");
        public final static Property CountryNumber = new Property(3, String.class, "countryNumber", false, "COUNTRY_NUMBER");
        public final static Property CountryImage = new Property(4, String.class, "countryImage", false, "COUNTRY_IMAGE");
    }


    public NYCountryCodeDao(DaoConfig config) {
        super(config);
    }
    
    public NYCountryCodeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NYCOUNTRY_CODE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"COUNTRY_CODE\" TEXT," + // 1: countryCode
                "\"COUNTRY_NAME\" TEXT," + // 2: countryName
                "\"COUNTRY_NUMBER\" TEXT," + // 3: countryNumber
                "\"COUNTRY_IMAGE\" TEXT);"); // 4: countryImage
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NYCOUNTRY_CODE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NYCountryCode entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String countryCode = entity.getCountryCode();
        if (countryCode != null) {
            stmt.bindString(2, countryCode);
        }
 
        String countryName = entity.getCountryName();
        if (countryName != null) {
            stmt.bindString(3, countryName);
        }
 
        String countryNumber = entity.getCountryNumber();
        if (countryNumber != null) {
            stmt.bindString(4, countryNumber);
        }
 
        String countryImage = entity.getCountryImage();
        if (countryImage != null) {
            stmt.bindString(5, countryImage);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NYCountryCode entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String countryCode = entity.getCountryCode();
        if (countryCode != null) {
            stmt.bindString(2, countryCode);
        }
 
        String countryName = entity.getCountryName();
        if (countryName != null) {
            stmt.bindString(3, countryName);
        }
 
        String countryNumber = entity.getCountryNumber();
        if (countryNumber != null) {
            stmt.bindString(4, countryNumber);
        }
 
        String countryImage = entity.getCountryImage();
        if (countryImage != null) {
            stmt.bindString(5, countryImage);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public NYCountryCode readEntity(Cursor cursor, int offset) {
        NYCountryCode entity = new NYCountryCode( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // countryCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // countryName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // countryNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // countryImage
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NYCountryCode entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCountryCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCountryName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCountryNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCountryImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(NYCountryCode entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(NYCountryCode entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NYCountryCode entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
